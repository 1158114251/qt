/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Qt Software Information (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the either Technology Preview License Agreement or the
** Beta Release License Agreement.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page binding.html
\title Property Binding

Property binding is a declarative way of specifying the value of a property.  Binding allows
a property's value to be expressed as an ECMAScript expression that defines the value relative
to other property values or data accessible in the application.  The property value is 
automatically kept up to date if the other properties or data values change.

Bindings are created in QML when an expression is assigned to a property. For example, the following produces two rectangles of equal size (\c rect2 is bound to the size of \c rect1):
\code
Rectangle { id: rect1; width: 100; height: 100 }
Rectangle { id: rect2; width: rect1.width; height: rect1.height }
\endcode

There is also a special \l Binding element, which is typically used to bind from the UI to the underlying UI model (see \l {Passing Data Between C++ and QML} for an example of this). The bindings above could be expressed using the \l Binding element as:

\code
Binding { target: rect2; property: "width";  value: rect1.width }
Binding { target: rect2; property: "height"; value: rect1.height }
\endcode

In addition to binding directly to a property, you can also bind to the results of expressions involving properties. For example:
\code
Text { text: contact.firstname + ' ' + contact.lastname }
Image { source: if (contact.gender == "female") {"pics/female.png"} else {"pics/male.png"} }
\endcode

Relevant items can also be bound to the contents of a model - see \l ListView for an example of this.

Data can be bound to C++ objects - see \l {QML/C++ Data Binding}.
*/

/*!
\page qtbinding.html
\target qtbinding
\title QML/C++ Data Binding

The QML mechanisms of data binding can also be used to bind Qt C++ objects.

The data binding framework is based on Qt's property system (see the Qt documentation for more details on this system). If a binding is meant to be dynamic (where changes in one object are reflected in another object), \c NOTIFY must be specified for the property being tracked. If \c NOTIFY is not specified, any binding to that property will be an 'intialization' binding (the tracking object will be updated only once with the initial value of the tracked object).

Relevant items can also be bound to the contents of a Qt model.
For example, ListView can make use of data from a QAbstractItemModel-derived model.


\section1 Passing Data Between C++ and QML

Data binding provides one method of data transfer between C++ and QML.

For example, lets say you want to implement a slider in QML that changes the screen brightness of the device it is running on. You would start by declaring a brightness property on your QObject-derived class:
\code
class MyScreen : public QObject
{
    Q_OBJECT
public:
    MyScreen(QObject *parent=0);

    Q_PROPERTY(int brightness READ brightness WRITE setBrightness NOTIFY brightnessChanged);
    int brightness() const;
    void setBrightness(int b);
    ...

signals:
    void brightnessChanged();

private:
    int m_brightness;
};

int brightness() const
{
    return m_brightness;
}

void setBrightness(int b)
{
    if (b != m_brightness) {
        m_brightness = b;
        emit brightnessChanged();

        //set device brightness
        ...
    }
}
\endcode

\note One important thing to keep in mind is that the changed signal should only be emitted when there is a real change ( \c b \c != \c m_brightness ), or you may get an infinite loop.

Next, make an instance of this class visible to the QML bind engine:
\code
QmlView *view = new QmlView;
view->setUrl("MyUI.qml");

MyScreen *screen = new MyScreen;
QmlContext *ctxt = view->rootContext();
ctxt->setContextProperty("screen", screen);

view->execute();
\endcode

\note Bindings must be made after setUrl() but before execute().

Finally, in QML you can make the appropriate bindings, so in \c "MyUI.qml":

\code
Slider { value: screen.brightness }
Binding { target: screen; property: "brightness"; value: slider.value }
\endcode

The \l QBindableMap class provides a convenient way to make data visible to the bind engine.

C++ \l {qmlmodels}{Data Models} may also be provided to QML.

*/
