/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Qt Software Information (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the either Technology Preview License Agreement or the
** Beta Release License Agreement.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qmlmodels.html
\target qmlmodels
\title Data Models

Some QML Items use Data Models to provide the data to be displayed.
These items typically require a \e delegate component that
creates an instance for each item in the model.  Models may be static, or
have items modified, inserted, removed or moved dynamically.

Data is provided to the delegate via named data roles which the
delegate may bind to.  The roles are exposed as properties of the
\e model property, though this property is set as a default property
of the delegate so, unless there is a naming clash with a
property in the delegate, the roles are usually accessed unqualified.

A special \e index role containing the index of the item in the model
is also available.

Models that do not have named roles will have the data provided via
the \e modelData role.  The \e modelData role is also provided for
Models that have only one role.  In this case the \e modelData role
contains the same data as the named role.

There are a number of QML elements that operate using data models:

\list
\o ListView
\o GridView
\o PathView
\o \l Repeater
\endlist

QML supports several types of data model, which may be provided by QML
or C++ (via QmlContext::setContextProperty(), for example).

\section1 QML Data Models

\section2 ListModel

ListModel is a simple hierarchy of elements specified in QML.  The
available roles are specified by the \l ListElement properties.

\code
ListModel {
    id: fruitModel
    ListElement {
        name: "Apple"
        cost: 2.45
    }
    ListElement {
        name: "Orange"
        cost: 3.25
    }
    ListElement {
        name: "Banana"
        cost: 1.95
    }
}
\endcode

The above model has two roles, \e name and \e cost.  These can be bound
to by a ListView delegate, for example:

\code
Component {
    id: fruitDelegate
    Row {
        Text { text: "Fruit: " + name }
        Text { text: "Cost: $" + cost }
    }
}
ListView {
    model: fruitModel
    delegate: fruitDelegate
}
\endcode


\section2 XmlListModel

XmlListModel allows construction of a model from an XML data source. The roles
are specified via the \l XmlRole element.

The following model has three roles, \e title, \e link and \e description:
\code
XmlListModel {
     id: feedModel
     source: "http://rss.news.yahoo.com/rss/oceania"
     query: "/rss/channel/item"
     XmlRole { name: "title"; query: "title/string()" }
     XmlRole { name: "link"; query: "link/string()" }
     XmlRole { name: "description"; query: "description/string()" }
}
\endcode


\section2 VisualItemModel

VisualItemModel allows QML items to be provided as a model.  This model contains
both the data and delegate (its child items).  This model does not provide any roles.

\code
 VisualItemModel {
     id: itemModel
     Rectangle { height: 30; width: 80; color: "red" }
     Rectangle { height: 30; width: 80; color: "green" }
     Rectangle { height: 30; width: 80; color: "blue" }
 }

 ListView {
     anchors.fill: parent
     model: itemModel
 }
\endcode

Note that in the above example there is no delegate required.
The items of the model itself provide the visual elements that
will be positioned by the view.


\section1 C++ Data Models

\list
\o QAbstractItemModel provides the roles set via the QAbstractItemModel::setRoleNames() method.
\o QStringList provides the contents of the list via the \e modelData role.
\o QList<QObject*> provides the properties of the objects in the list as roles.
\endlist


\section1 Other Data Models


\section2 An Integer

An Integer specifies a model containing the integer number of elements.
There are no data roles.

The following example creates a ListView with five elements:
\code
Component {
    id: itemDelegate
    Text { text: "I am item number: " + index }
}
ListView {
    model: 5
    delegate: itemDelegate
}
\endcode


\section2 An Object Instance

An Object Instance specifies a model with a single Object element.  The
properties of the object are provided as roles.

The example below creates a list with one item, showing the color of the
\e myText text.  Note the use of the \e model property to specify the model
data rather than the \e color property of the Text element in the delegate.

\code
Rectangle {
    Text {
        id: myText
        text: "Hello"
        color: "#dd44ee"
    }

    Component {
        id: myDelegate
        Text {
            text: model.color
        }
    }
    ListView {
        anchors.fill: parent
        anchors.topMargin: 30
        model: myText
        delegate: myDelegate
    }
}
\endcode

*/
