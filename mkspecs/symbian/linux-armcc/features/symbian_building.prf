QMAKE_CFLAGS += $$QMAKE_CFLAGS.ARMCC
QMAKE_CXXFLAGS += $$QMAKE_CXXFLAGS.ARMCC

symbianObjdir=$$OBJECTS_DIR
isEmpty(symbianObjdir) {
    symbianObjdir = .
}
symbianDestdir=$$DESTDIR
isEmpty(symbianDestdir) {
    symbianDestdir = .
}

contains(QMAKE_CFLAGS, "--thumb")|contains(QMAKE_CXXFLAGS, "--thumb") {
    DEFINES += __MARM_THUMB__
}

for(libraries, LIBS) {
    libraries = $$replace(libraries, "\.dll$", ".dso")
    isFullName = $$find(libraries, \.)
    isEmpty(isFullName) {
        newLIBS += "$${libraries}.dso"
    } else {
        newLIBS += "$${libraries}"
    }
}
LIBS = $$newLIBS
newLIBS =
for(libraries, QMAKE_LIBS) {
    libraries = $$replace(libraries, "\.dll$", ".dso")
    isFullName = $$find(libraries, \.)
    isEmpty(isFullName) {
        newLIBS += "$${libraries}.dso"
    } else {
        newLIBS += "$${libraries}"
    }
}
QMAKE_LIBS = $$newLIBS

# This needs to be done after the above LIBS mangling.
include(../platformlibs.conf)

elf2e32_LIBPATH =
for(libPath, QMAKE_LIBDIR) {
    elf2e32_LIBPATH += "--libpath=$$libPath"
}

isEmpty(VERSION) {
    VERSION = $$QT_VERSION
}

# Check for version validity.
!isEmpty(VERSION):!contains(VERSION, "[0-9]+"):!contains(VERSION, "[0-9]+\.[0-9]+")!contains(VERSION, "[0-9]+(\.[0-9]+){2}") {
    error("Invalid VERSION for Symbian: $$VERSION")
}

splitVersion = $$split(VERSION, ".")
count(splitVersion, 1) {
    # Default Symbian version if none is specified.
    hexVersion = "000a0000"
    decVersion = "10.0"
} else {
    count(splitVersion, 3) {
        hexVersion = $$system("sh -c 'printf %02x $$member(splitVersion, 0)'")
        hexPart2 = $$system("sh -c 'printf %02x $$member(splitVersion, 1)'")"
        hexPart2 = $$hexPart2$$system("sh -c 'printf %02x $$member(splitVersion, 2)'")"
        decVersion = $$system("sh -c 'printf %1d 0x$$hexVersion'").
        hexVersion = $$hexVersion$$hexPart2
        decVersion = $$decVersion$$system("sh -c 'printf %d 0x$$hexPart2'")
        !contains(hexVersion, "[0-9a-f]{8}"):hexVersion = "00$${hexVersion}"
    } else {  # app code may have different numbering...
        hexVersion = $$VERSION
        decVersion = $$VERSION
    }
}
#error ("hexVersion: $$hexVersion, decVersion: $$decVersion")

intUid3 = $$lower($$replace(TARGET.UID3, "^0x", ""))
isEmpty(TARGET.SID):TARGET.SID = $$TARGET.UID3
isEmpty(TARGET.UID2):TARGET.UID2 = 0x00000000

contains(TEMPLATE, lib):!contains(CONFIG, static):!contains(CONFIG, staticlib) {
    !isEmpty(QMAKE_POST_LINK):QMAKE_POST_LINK += &&
    QMAKE_POST_LINK += $$QMAKE_MOVE $$symbianDestdir/$${TARGET}.dll $$symbianDestdir/$${TARGET}.sym
    capability = $$replace(TARGET.CAPABILITY, " ", "+")
    !isEmpty(capability): capability = "--capability=$$capability"
    # the tee and grep at the end work around the issue that elf2e32 doesn't return non-null on error
    QMAKE_POST_LINK += && elf2e32  --version=$$decVersion --sid=$$TARGET.SID  --uid1=0x10000079 --uid2=$$TARGET.UID2 --uid3=$$TARGET.UID3 --dlldata --heap=0x00020000,0x00800000 --stack=0x00014000 --capability=None --fpu=softvfp --targettype=DLL --elfinput=$${symbianDestdir}/$${TARGET}.sym --output=$${symbianDestdir}/$${TARGET}.dll --dso=$$symbianDestdir/$${TARGET}.dso --defoutput=$$symbianObjdir/$${TARGET}.def --unfrozen --linkas=$${TARGET}\\{$${hexVersion}\\}\\[$${intUid3}\\].dll --compressionmethod bytepair $$elf2e32_LIBPATH --unpaged $$capability | tee elf2e32.log && test `grep -c 'Error:' elf2e32.log` = 0 && rm elf2e32.log
    QMAKE_DISTCLEAN += $${symbianDestdir}/$${TARGET}.sym
    QMAKE_DISTCLEAN += $${symbianDestdir}/$${TARGET}.dso
    QMAKE_CLEAN += $${symbianObjdir}/$${TARGET}.def

    QMAKE_LIBS += -ledllstub.lib -ledll.lib\\(uc_dll_.o\\)

    QMAKE_LFLAGS += --symver_soname --soname $${TARGET}\\{$${hexVersion}\\}\\[$${intUid3}\\].dll
}

contains(TEMPLATE, app):!contains(QMAKE_LINK, "^@.*") {
    !isEmpty(QMAKE_POST_LINK):QMAKE_POST_LINK += &&

    QMAKE_POST_LINK += $$QMAKE_MOVE $$symbianDestdir/$${TARGET} $$symbianDestdir/$${TARGET}.sym
    capability = $$replace(TARGET.CAPABILITY, " ", "+")
    !isEmpty(capability): capability = "--capability=$$capability"
    # the tee and grep at the end work around the issue that elf2e32 doesn't return non-null on error
    QMAKE_POST_LINK += && elf2e32  --version $$decVersion --sid=$$TARGET.SID  --uid1=0x1000007a --uid2=$$TARGET.UID2 --uid3=$$TARGET.UID3 --dlldata --heap=0x00020000,0x00800000 --stack=0x00014000 --capability=None --fpu=softvfp --targettype=EXE --elfinput=$${symbianDestdir}/$${TARGET}.sym --output=$${symbianDestdir}/$${TARGET}.exe --unfrozen --linkas=$${TARGET}\\{$${hexVersion}\\}\\[$${intUid3}\\].exe --compressionmethod bytepair $$elf2e32_LIBPATH --unpaged $$capability | tee elf2e32.log && test `grep -c 'Error:' elf2e32.log` = 0 && rm elf2e32.log
    QMAKE_DISTCLEAN += $${symbianDestdir}/$${TARGET}.sym
    QMAKE_DISTCLEAN += $${symbianDestdir}/$${TARGET}.exe

    QMAKE_LIBS += -leexe.lib\\(uc_exe_.o\\)

    QMAKE_LFLAGS += --symver_soname --soname $${TARGET}\\{$${hexVersion}\\}\\[$${intUid3}\\].exe
}

# Symbian resource files

linux-armcc:symbian_resources_INCLUDES = -I$$(RVCT22INC)
symbian_resources_INCLUDES = $$replace(symbian_resources_INCLUDES, ",", " -I")
symbian_resources_INCLUDES += $$join(INCLUDEPATH, " -I", "-I")
symbian_resources_DEFINES = $$join(DEFINES, " -D", "-D")
symbian_resources_RCC_DIR = $$replace(RCC_DIR, "/$", "")
symbian_resources_INCLUDES += "-I $$symbian_resources_RCC_DIR"

for(symbian_resource, SYMBIAN_RESOURCES) {
    symbian_resource = $$basename(symbian_resource)
    symbian_resource_clean = $$replace(symbian_resource, "\.rss$", ".rsc")
    QMAKE_DISTCLEAN += $${symbianDestdir}/$${symbian_resource_clean}
    symbian_resource_clean = $$replace(symbian_resource, "\.rss$", ".rpp")
    QMAKE_CLEAN += $${symbian_resources_RCC_DIR}/$${symbian_resource_clean}
}

symbianresources.input = SYMBIAN_RESOURCES
symbianresources.output = $$symbian_resources_RCC_DIR/${QMAKE_FILE_BASE}.rsg
symbianresources.commands = cpp -nostdinc -undef \
                            $$symbian_resources_INCLUDES \
                            $$symbian_resources_DEFINES \
                            ${QMAKE_FILE_NAME} \
                            -o $${symbian_resources_RCC_DIR}/${QMAKE_FILE_BASE}.rpp \
                            && rcomp -u -m045,046,047 \
                            -s$${symbian_resources_RCC_DIR}/${QMAKE_FILE_BASE}.rpp \
                            -o$${symbianDestdir}/${QMAKE_FILE_BASE}.rsc \
                            -h$${symbian_resources_RCC_DIR}/${QMAKE_FILE_BASE}.rsg \
                            -i${QMAKE_FILE_NAME}
symbianresources.dependency_type = TYPE_C
symbianresources.CONFIG = no_link target_predeps

QMAKE_EXTRA_COMPILERS += symbianresources

contains(TEMPLATE, "app"):!contains(CONFIG, "no_icon") {
    baseTarget = $$basename(TARGET)
    baseTarget = $$replace(baseTarget, -,_)
    baseTarget = $$replace(baseTarget, :,_)
    baseTarget = $$replace(baseTarget, \.,_)
    baseTarget = $$replace(baseTarget, " ",_)

    # Make our own extra compiler target in order to get dependencies for generated
    # files right. This also avoids the warning about files not found.
    symbianGenResource.inputFile = $${baseTarget}.rss
    symbianGenResource.input = symbianGenResource.inputFile
    # Reuse the command from earlier.
    symbianGenResource.commands = $$symbianresources.commands
    symbianGenResource.output = $$symbianresources.output
    symbianGenResource.CONFIG = no_link target_predeps

    symbianGenRegResource.inputFile = $${baseTarget}_reg.rss
    symbianGenRegResource.input = symbianGenRegResource.inputFile
    symbianGenRegResource.commands = $$symbianresources.commands
    symbianGenRegResource.output = $$symbianresources.output
    symbianGenRegResource.CONFIG = no_link target_predeps
    symbianGenRegResource.depends = $${symbian_resources_RCC_DIR}/$${baseTarget}.rsg

    QMAKE_EXTRA_COMPILERS += symbianGenResource symbianGenRegResource

    QMAKE_DISTCLEAN += $${TARGET}.rss
    QMAKE_DISTCLEAN += $${TARGET}.rsc
    QMAKE_DISTCLEAN += $${TARGET}_reg.rss
    QMAKE_DISTCLEAN += $${TARGET}_reg.rsc
    QMAKE_DISTCLEAN += $${TARGET}.loc
}

# Generated pkg files

QMAKE_DISTCLEAN += $${TARGET}_template.pkg

# Pre 2.6.23 Linux kernels have a limit on the environment size that can be passed to
# a forked process. We quite easily overstep this boundary when building big projects
# on Symbian, and since we depend on running the system() command, this causes the build
# to fail. Test here that system() can be successfully run. It is important that this
# check happens as late as possible, otherwise it will not be caught.
execve_sanity_test = $$system("echo testing")
!contains(execve_sanity_test, "testing") {
    error("Running system() failed. Maybe your kernel is too old? (Linux kernels need at least version 2.6.23)")
}
