/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSInspectorController.h"

#include <wtf/GetPtr.h>

#include "DOMWindow.h"
#include "InspectorController.h"
#include "JSNode.h"
#include "KURL.h"
#include "Node.h"

#include <runtime/Error.h>
#include <runtime/JSNumberCell.h>
#include <runtime/JSString.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSInspectorController);

/* Hash table */

static const HashTableValue JSInspectorControllerTableValues[2] =
{
    { "constructor", DontEnum|ReadOnly, (intptr_t)jsInspectorControllerConstructor, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSInspectorControllerTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSInspectorControllerTableValues, 0 };
#else
    { 2, 1, JSInspectorControllerTableValues, 0 };
#endif

/* Hash table for constructor */

static const HashTableValue JSInspectorControllerConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSInspectorControllerConstructorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSInspectorControllerConstructorTableValues, 0 };
#else
    { 1, 0, JSInspectorControllerConstructorTableValues, 0 };
#endif

class JSInspectorControllerConstructor : public DOMObject {
public:
    JSInspectorControllerConstructor(ExecState* exec)
        : DOMObject(JSInspectorControllerConstructor::createStructure(exec->lexicalGlobalObject()->objectPrototype()))
    {
        putDirect(exec->propertyNames().prototype, JSInspectorControllerPrototype::self(exec, exec->lexicalGlobalObject()), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    static PassRefPtr<Structure> createStructure(JSValue proto) 
    { 
        return Structure::create(proto, TypeInfo(ObjectType, ImplementsHasInstance)); 
    }
};

const ClassInfo JSInspectorControllerConstructor::s_info = { "InspectorControllerConstructor", 0, &JSInspectorControllerConstructorTable, 0 };

bool JSInspectorControllerConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSInspectorControllerConstructor, DOMObject>(exec, &JSInspectorControllerConstructorTable, this, propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSInspectorControllerPrototypeTableValues[48] =
{
    { "hideDOMNodeHighlight", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionHideDOMNodeHighlight, (intptr_t)0 },
    { "highlightDOMNode", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionHighlightDOMNode, (intptr_t)1 },
    { "loaded", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionLoaded, (intptr_t)0 },
    { "windowUnloading", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionWindowUnloading, (intptr_t)0 },
    { "attach", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionAttach, (intptr_t)0 },
    { "detach", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionDetach, (intptr_t)0 },
    { "closeWindow", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionCloseWindow, (intptr_t)0 },
    { "clearMessages", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionClearMessages, (intptr_t)0 },
    { "toggleNodeSearch", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionToggleNodeSearch, (intptr_t)0 },
    { "isWindowVisible", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionIsWindowVisible, (intptr_t)0 },
    { "searchingForNode", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionSearchingForNode, (intptr_t)0 },
    { "addResourceSourceToFrame", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionAddResourceSourceToFrame, (intptr_t)2 },
    { "addSourceToFrame", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionAddSourceToFrame, (intptr_t)3 },
    { "getResourceDocumentNode", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionGetResourceDocumentNode, (intptr_t)1 },
    { "search", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionSearch, (intptr_t)2 },
    { "databaseTableNames", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionDatabaseTableNames, (intptr_t)1 },
    { "setting", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionSetting, (intptr_t)1 },
    { "setSetting", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionSetSetting, (intptr_t)2 },
    { "inspectedWindow", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionInspectedWindow, (intptr_t)0 },
    { "localizedStringsURL", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionLocalizedStringsURL, (intptr_t)0 },
    { "hiddenPanels", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionHiddenPanels, (intptr_t)0 },
    { "platform", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionPlatform, (intptr_t)0 },
    { "moveByUnrestricted", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionMoveByUnrestricted, (intptr_t)2 },
    { "setAttachedWindowHeight", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionSetAttachedWindowHeight, (intptr_t)1 },
    { "wrapCallback", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionWrapCallback, (intptr_t)1 },
    { "resourceTrackingEnabled", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionResourceTrackingEnabled, (intptr_t)0 },
    { "enableResourceTracking", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionEnableResourceTracking, (intptr_t)1 },
    { "disableResourceTracking", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionDisableResourceTracking, (intptr_t)1 },
    { "enableDebuggerFromFrontend", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionEnableDebuggerFromFrontend, (intptr_t)1 },
    { "disableDebugger", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionDisableDebugger, (intptr_t)1 },
    { "pauseInDebugger", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionPauseInDebugger, (intptr_t)0 },
    { "resumeDebugger", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionResumeDebugger, (intptr_t)0 },
    { "stepOverStatementInDebugger", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionStepOverStatementInDebugger, (intptr_t)0 },
    { "stepIntoStatementInDebugger", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionStepIntoStatementInDebugger, (intptr_t)0 },
    { "stepOutOfFunctionInDebugger", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionStepOutOfFunctionInDebugger, (intptr_t)0 },
    { "debuggerEnabled", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionDebuggerEnabled, (intptr_t)0 },
    { "pauseOnExceptions", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionPauseOnExceptions, (intptr_t)0 },
    { "profilerEnabled", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionProfilerEnabled, (intptr_t)0 },
    { "startProfiling", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionStartProfiling, (intptr_t)0 },
    { "stopProfiling", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionStopProfiling, (intptr_t)0 },
    { "enableProfiler", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionEnableProfiler, (intptr_t)1 },
    { "disableProfiler", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionDisableProfiler, (intptr_t)1 },
    { "currentCallFrame", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionCurrentCallFrame, (intptr_t)0 },
    { "setPauseOnExceptions", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionSetPauseOnExceptions, (intptr_t)1 },
    { "addBreakpoint", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionAddBreakpoint, (intptr_t)2 },
    { "removeBreakpoint", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionRemoveBreakpoint, (intptr_t)2 },
    { "profiles", DontDelete|Function, (intptr_t)jsInspectorControllerPrototypeFunctionProfiles, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSInspectorControllerPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 2047, JSInspectorControllerPrototypeTableValues, 0 };
#else
    { 137, 127, JSInspectorControllerPrototypeTableValues, 0 };
#endif

const ClassInfo JSInspectorControllerPrototype::s_info = { "InspectorControllerPrototype", 0, &JSInspectorControllerPrototypeTable, 0 };

JSObject* JSInspectorControllerPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSInspectorController>(exec, globalObject);
}

bool JSInspectorControllerPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSInspectorControllerPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSInspectorController::s_info = { "InspectorController", 0, &JSInspectorControllerTable, 0 };

JSInspectorController::JSInspectorController(PassRefPtr<Structure> structure, PassRefPtr<InspectorController> impl)
    : DOMObject(structure)
    , m_impl(impl)
{
}

JSInspectorController::~JSInspectorController()
{
    forgetDOMObject(*Heap::heap(this)->globalData(), m_impl.get());
}

JSObject* JSInspectorController::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSInspectorControllerPrototype(JSInspectorControllerPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSInspectorController::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSInspectorController, Base>(exec, &JSInspectorControllerTable, this, propertyName, slot);
}

JSValue jsInspectorControllerConstructor(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    return static_cast<JSInspectorController*>(asObject(slot.slotBase()))->getConstructor(exec);
}
JSValue JSInspectorController::getConstructor(ExecState* exec)
{
    return getDOMConstructor<JSInspectorControllerConstructor>(exec);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionHideDOMNodeHighlight(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->hideHighlight();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionHighlightDOMNode(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->highlightDOMNode(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionLoaded(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->scriptObjectReady();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionWindowUnloading(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->close();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionAttach(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->attachWindow();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionDetach(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->detachWindow();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionCloseWindow(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->closeWindow();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionClearMessages(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->clearConsoleMessages();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionToggleNodeSearch(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->toggleSearchForNodeInPage();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionIsWindowVisible(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsBoolean(imp->windowVisible());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionSearchingForNode(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsBoolean(imp->searchingForNodeInPage());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionAddResourceSourceToFrame(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    int identifier = args.at(0).toInt32(exec);
    Node* frame = toNode(args.at(1));

    imp->addResourceSourceToFrame(identifier, frame);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionAddSourceToFrame(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    const UString& mimeType = args.at(0).toString(exec);
    const UString& sourceValue = args.at(1).toString(exec);
    Node* frame = toNode(args.at(2));


    JSC::JSValue result = jsBoolean(imp->addSourceToFrame(mimeType, sourceValue, frame));
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionGetResourceDocumentNode(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->getResourceDocumentNode(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionSearch(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->search(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionDatabaseTableNames(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->databaseTableNames(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionSetting(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->setting(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionSetSetting(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->setSetting(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionInspectedWindow(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->inspectedWindow(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionLocalizedStringsURL(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsString(exec, imp->localizedStringsURL());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionHiddenPanels(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsString(exec, imp->hiddenPanels());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionPlatform(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsString(exec, imp->platform());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionMoveByUnrestricted(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    float x = args.at(0).toFloat(exec);
    float y = args.at(1).toFloat(exec);

    imp->moveWindowBy(x, y);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionSetAttachedWindowHeight(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    unsigned height = args.at(0).toInt32(exec);

    imp->setAttachedWindowHeight(height);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionWrapCallback(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->wrapCallback(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionResourceTrackingEnabled(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsBoolean(imp->resourceTrackingEnabled());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionEnableResourceTracking(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool always = args.at(0).toBoolean(exec);

    imp->enableResourceTracking(always);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionDisableResourceTracking(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool always = args.at(0).toBoolean(exec);

    imp->disableResourceTracking(always);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionEnableDebuggerFromFrontend(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool always = args.at(0).toBoolean(exec);

    imp->enableDebuggerFromFrontend(always);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionDisableDebugger(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool always = args.at(0).toBoolean(exec);

    imp->disableDebugger(always);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionPauseInDebugger(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->pauseInDebugger();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionResumeDebugger(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->resumeDebugger();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionStepOverStatementInDebugger(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->stepOverStatementInDebugger();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionStepIntoStatementInDebugger(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->stepIntoStatementInDebugger();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionStepOutOfFunctionInDebugger(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->stepOutOfFunctionInDebugger();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionDebuggerEnabled(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsBoolean(imp->debuggerEnabled());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionPauseOnExceptions(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsBoolean(imp->pauseOnExceptions());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionProfilerEnabled(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());


    JSC::JSValue result = jsBoolean(imp->profilerEnabled());
    return result;
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionStartProfiling(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->startUserInitiatedProfiling();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionStopProfiling(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());

    imp->stopUserInitiatedProfiling();
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionEnableProfiler(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool always = args.at(0).toBoolean(exec);

    imp->enableProfiler(always);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionDisableProfiler(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool always = args.at(0).toBoolean(exec);

    imp->disableProfiler(always);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionCurrentCallFrame(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->currentCallFrame(exec, args);
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionSetPauseOnExceptions(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    bool pauseOnExceptions = args.at(0).toBoolean(exec);

    imp->setPauseOnExceptions(pauseOnExceptions);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionAddBreakpoint(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    unsigned sourceID = args.at(0).toInt32(exec);
    unsigned lineNumber = args.at(1).toInt32(exec);

    imp->addBreakpoint(sourceID, lineNumber);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionRemoveBreakpoint(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    InspectorController* imp = static_cast<InspectorController*>(castedThisObj->impl());
    unsigned sourceID = args.at(0).toInt32(exec);
    unsigned lineNumber = args.at(1).toInt32(exec);

    imp->removeBreakpoint(sourceID, lineNumber);
    return jsUndefined();
}

JSValue JSC_HOST_CALL jsInspectorControllerPrototypeFunctionProfiles(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSInspectorController::s_info))
        return throwError(exec, TypeError);
    JSInspectorController* castedThisObj = static_cast<JSInspectorController*>(asObject(thisValue));
    return castedThisObj->profiles(exec, args);
}

JSC::JSValue toJS(JSC::ExecState* exec, InspectorController* object)
{
    return getDOMObjectWrapper<JSInspectorController>(exec, object);
}
InspectorController* toInspectorController(JSC::JSValue value)
{
    return value.isObject(&JSInspectorController::s_info) ? static_cast<JSInspectorController*>(asObject(value))->impl() : 0;
}

}
